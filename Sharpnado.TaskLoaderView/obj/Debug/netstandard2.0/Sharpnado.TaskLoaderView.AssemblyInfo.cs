//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Jean-Marie Alfonsi")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyCopyrightAttribute("Copyright 2021 Sharpnado")]
[assembly: System.Reflection.AssemblyDescriptionAttribute("Free yourself from IsBusy=true!\nThe `TaskLoaderView` is a UI component that handl" +
    "es all your UI loading state (Loading, Error, Result, Notification), and removes" +
    " all the pain of async loading from your view models (try catch / async void / I" +
    "sBusy / HasErrors / base view models / ...) thanks to its brother the `TaskLoade" +
    "rNotifier`.\n\nBREAKING CHANGE Version 2.4.0:\nThe task source given to to TaskLoad" +
    "erNotifier is now a Func{bool, Task} (or a Func{bool, Task{T}}) instead of a Fun" +
    "c{Task}.\nYou can simply change your calls from Loader.Load(() => InitializeAsync" +
    "()) to Loader.Load(_ => InitializeAsync()) to ignore it if you like.\n\nThe boolea" +
    "n that is passed now to your task source is a boolean indicating if the notifier" +
    " is refreshing.\nYou can use it for invalidating your cache, for example:\n\npublic" +
    " Task LoadItems(bool isRefreshing)\n{\n    if (isRefreshing || !_cache.ContainsIte" +
    "ms())\n    {\n        _cache.InvalidateItems();\n        var items = _httpService.G" +
    "etItems()\n        _cache.PutItems(items);\n        return items;\n    }\n\n    retur" +
    "n _cache.GetItems();\n}\n\nFeaturing:\n\n* Default views for all loading states (Load" +
    "ing, Error, Success, Notification, Refresh)\n* Snackbar component\n* Compose notif" +
    "iers with CompositeTaskLoaderNotifier\n* Stylable views including fonts, accent c" +
    "olor, error images, ...\n* Any states are overridable with user custom views and " +
    "easily positionned with AbsoluteLayout properties\n* Support for Xamarin.Forms.Sk" +
    "eleton nuget package\n* Support for refresh scenarios, and error while refreshing" +
    " with the ErrorNotificationView\n* Supports Async mvvm ICommand through TaskLoade" +
    "rCommand\n* Supports loading task on demand with the NotStarted state\n* TaskLoade" +
    "rNotifier for the ViewModel side taking care of all the error handling and the I" +
    "sBusy nonsense")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("2.4.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("2.4.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Sharpnado.TaskLoaderView (netstandard2.0)")]
[assembly: System.Reflection.AssemblyTitleAttribute("Sharpnado.TaskLoaderView")]
[assembly: System.Reflection.AssemblyVersionAttribute("2.4.0.0")]
[assembly: System.Reflection.AssemblyMetadataAttribute("RepositoryUrl", "https://github.com/roubachof/Sharpnado.TaskLoaderView")]
[assembly: System.Resources.NeutralResourcesLanguageAttribute("en")]

// Generated by the MSBuild WriteCodeFragment class.

